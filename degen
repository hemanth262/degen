pragma solidity ^0.8.18;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract MacbookSubscription is ERC20, Ownable(msg.sender) {
    enum MacbookModel { MACBOOK_AIR, MACBOOK_PRO, MACBOOK_M1 }

    event SubscriptionRedeemed(address indexed account, MacbookModel macbookModel, uint256 subscriptionCost);
    event TokensBurned(address indexed account, uint256 amount);

    mapping(address => MacbookModel) public userMacbooks;

    uint256 public constant AirCost = 100;
    uint256 public constant ProCost = 200;
    uint256 public constant M1Cost = 500;

    constructor() ERC20("Degen", "DGN") {}

    function mintTokens(address to, uint256 amount) public onlyOwner {
        _mint(to, amount);
    }

    function burn(uint256 amount) public {
        require(amount > 0, "Amount to burn must be greater than zero");
        require(balanceOf(msg.sender) >= amount, "Insufficient funds for token burn");

        _burn(msg.sender, amount);

        emit TokensBurned(msg.sender, amount);
    }

    function redeemMacbook(uint8 modelNumber) public {
        require(modelNumber >= 1 && modelNumber <= 3, "Invalid model number");

        MacbookModel macbookModel;
        uint256 modelCost;

        if (modelNumber == 1) {
            macbookModel = MacbookModel.MACBOOK_AIR;
            modelCost = AirCost;
        } else if (modelNumber == 2) {
            macbookModel = MacbookModel.MACBOOK_PRO;
            modelCost = ProCost;
        } else {
            macbookModel = MacbookModel.MACBOOK_M1;
            modelCost = M1Cost;
        }

        require(balanceOf(msg.sender) >= modelCost, "Insufficient funds for Macbook redemption");

        _burn(msg.sender, modelCost);

        userMacbooks[msg.sender] = macbookModel;

        emit SubscriptionRedeemed(msg.sender, macbookModel, modelCost);
    }

    function transferMacbookTokens(address to, uint256 amount) external {
        require(to != address(0), "Invalid recipient address");
        require(balanceOf(msg.sender) >= amount, "Insufficient funds for token transfer");

        _transfer(msg.sender, to, amount);
    }

    function getMacbookModel() external view returns (MacbookModel) {
        return userMacbooks[msg.sender];
    }
}
